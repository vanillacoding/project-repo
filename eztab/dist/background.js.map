{"version":3,"sources":["webpack://eztab/./src/constants/messageName.js","webpack://eztab/./src/background.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kDAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAC;;;AC5BgD;;AAElD;AACA;AACA,SAAS,gBAAgB;AACzB;AACA;AACA,SAAS,sBAAsB;AAC/B,iDAAiD,eAAe;AAChE;AACA,SAAS,yBAAyB;AAClC,uDAAuD,gBAAgB;AACvE;AACA,SAAS,sBAAsB;AAC/B;AACA;AACA,SAAS,yBAAyB;AAClC;AACA;AACA,SAAS,sBAAsB;AAC/B;AACA,sBAAsB,+BAA+B,sBAAsB,EAAE;AAC7E;AACA;AACA,SAAS,wBAAwB;AACjC;AACA;AACA,SAAS,sBAAsB;AAC/B,6BAA6B,2BAA2B;AACxD;AACA,SAAS,wBAAwB;AACjC;AACA;AACA,SAAS,6BAA6B;AACtC,aAAa,oBAAoB;;AAEjC;AACA;AACA,gBAAgB,6BAA6B;AAC7C,oBAAoB,4BAA4B;AAChD,SAAS;AACT;AACA;AACA;AACA,SAAS,4BAA4B;AACrC,aAAa,oBAAoB;;AAEjC;AACA;AACA;AACA,SAAS,oBAAoB;AAC7B,6BAA6B,2BAA2B;AACxD;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA,UAAU,2BAA2B;AACrC,cAAc,UAAU;AACxB,GAAG;AACH,CAAC;;AAED;AACA;AACA;AACA,GAAG;AACH,+CAA+C,iBAAiB;AAChE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL,GAAG;AACH","file":"background.js","sourcesContent":["const INIT = \"init\";\nconst CHANGE_TAB = \"changeTab\";\nconst CHANGE_WINDOW = \"changeWindow\";\nconst REMOVE_TAB = \"removeTab\";\nconst REMOVE_WINDOW = \"removeWindow\";\nconst SAVE_GROUP = \"saveGroup\";\nconst REMOVE_GROUP = \"removeGroup\";\nconst OPEN_GROUP = \"openGroup\";\nconst CLEAR_GROUPS = \"clearGroups\";\nconst CHANGE_GROUP_NAME = \"changeGroupName\";\nconst REMOVE_GROUP_TAB = \"removeGroupTab\";\nconst OPEN_TAB = \"openTab\";\nconst STORAGE_UPDATED = \"storageUpdated\";\n\nexport default {\n  INIT,\n  CHANGE_TAB,\n  CHANGE_WINDOW,\n  REMOVE_TAB,\n  REMOVE_WINDOW,\n  SAVE_GROUP,\n  REMOVE_GROUP,\n  OPEN_GROUP,\n  CLEAR_GROUPS,\n  CHANGE_GROUP_NAME,\n  REMOVE_GROUP_TAB,\n  OPEN_TAB,\n  STORAGE_UPDATED,\n};\n","import messageName from \"./constants/messageName\";\n\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  switch (request.name) {\n    case messageName.INIT:\n      getInitialState().then((initalState) => sendResponse(initalState));\n      break;\n    case messageName.CHANGE_TAB:\n      chrome.tabs.update(request.payload.tabId, { active: true });\n      break;\n    case messageName.CHANGE_WINDOW:\n      chrome.windows.update(request.payload.windowId, { focused: true });\n      break;\n    case messageName.REMOVE_TAB:\n      chrome.tabs.remove(Number(request.payload.tabId));\n      break;\n    case messageName.REMOVE_WINDOW:\n      chrome.windows.remove(request.payload.windowId);\n      break;\n    case messageName.SAVE_GROUP:\n      setStorageSyncData(request.payload).then(() =>\n        sendResponse({ name: \"groupSaved\", payload: { text: \"Group Saved\" } })\n      );\n      break;\n    case messageName.REMOVE_GROUP:\n      chrome.storage.sync.remove(request.payload.groupName);\n      break;\n    case messageName.OPEN_GROUP:\n      chrome.windows.create({ url: request.payload.url });\n      break;\n    case messageName.CLEAR_GROUPS:\n      chrome.storage.sync.clear();\n      break;\n    case messageName.CHANGE_GROUP_NAME: {\n      const { prevName, newName } = request.payload;\n\n      changeGroupName(prevName, newName).then(() =>\n        sendResponse({\n          name: messageName.CHANGE_GROUP_NAME,\n          payload: { text: \"Groupname Changed\" },\n        })\n      );\n      break;\n    }\n    case messageName.REMOVE_GROUP_TAB: {\n      const { groupName, tabUrl } = request.payload;\n\n      removeGroupTab(groupName, tabUrl);\n      break;\n    }\n    case messageName.OPEN_TAB:\n      chrome.windows.create({ url: request.payload.url });\n      break;\n  }\n\n  return true;\n});\n\nchrome.storage.onChanged.addListener((changes) => {\n  chrome.runtime.sendMessage({\n    name: messageName.STORAGE_UPDATED,\n    payload: { changes },\n  });\n});\n\nconst getInitialState = async () => {\n  const currentWindow = await chrome.windows.getCurrent({\n    populate: true,\n  });\n  const windows = await chrome.windows.getAll({ populate: true });\n  const tabGroups = await getStorageSyncData();\n\n  return {\n    name: \"initRes\",\n    payload: {\n      currentWindowId: currentWindow.id,\n      windows,\n      tabGroups,\n    },\n  };\n};\n\nconst removeGroupTab = async (groupName, tabUrl) => {\n  const options = {};\n  const data = await getStorageSyncData(groupName);\n  options[groupName] = data[groupName].filter((el) => el.url !== tabUrl);\n\n  chrome.storage.sync.remove(groupName);\n\n  if (options[groupName].length === 0) {\n    return;\n  }\n\n  chrome.storage.sync.set(options);\n};\n\nconst changeGroupName = async (prevName, newName) => {\n  const options = {};\n  const data = await getStorageSyncData(prevName);\n  options[newName] = data[prevName];\n\n  chrome.storage.sync.remove(prevName);\n  chrome.storage.sync.set(options);\n};\n\nconst getStorageSyncData = (key = null) => {\n  return new Promise((resolve, reject) => {\n    chrome.storage.sync.get(key, (items) => {\n      if (chrome.runtime.lastError) {\n        return reject(chrome.runtime.lastError);\n      }\n\n      resolve(items);\n    });\n  });\n};\n\nconst setStorageSyncData = (options) => {\n  return new Promise((resolve, reject) => {\n    chrome.storage.sync.set(options, () => {\n      if (chrome.runtime.lastError) {\n        return reject(chrome.runtime.lastError);\n      }\n\n      resolve();\n    });\n  });\n};\n"],"sourceRoot":""}